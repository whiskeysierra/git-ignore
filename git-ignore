#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

from __future__ import print_function, unicode_literals
import argparse
import os

import argcomplete
from clint.textui import colored, core, indent, puts

directory = os.path.dirname(os.path.realpath(__file__))
repository = os.path.expanduser('~/.gitignore')

if not os.path.exists(repository):
    os.mkdir(repository)

files = os.listdir(repository)


def list_templates(args):
    for template in files:
        print(template)


def update_templates(args):
    import requests

    if args.templates:
        templates = args.templates
    else:
        templates = requests.get('http://gitignore.io/api/list').text.strip().split(',')

    puts("Updating...")
    with indent(4):
        for template in sorted(templates):
            with open(os.path.join(repository, template), 'w') as f:
                puts('%s... ' % template, newline=False)
                try:
                    content = requests.get('http://gitignore.io/api/%s' % template).text
                    # skip comment header
                    lines = content.splitlines()

                    if not lines[0] == '# Generated by http://gitignore.io':
                        raise IOError('Invalid content: \n%s' % content)

                    content = '\n'.join(lines[2:])
                    f.writelines(content)
                    print(colored.green('done'))
                except Exception:
                    print(colored.red('failed'))


def generate_content(templates):
    parts = []

    for template in templates:
        with open(os.path.join(repository, template)) as f:
            parts.append(f.read())

    return '\n\n'.join(parts) + '\n'


def print_templates(args):
    puts(generate_content(args.templates), newline=False)


def write_templates(args):
    puts("Writing... ", newline=False)

    gitignore = os.path.join(os.getcwd(), '.gitignore')

    if not args.overwrite and os.path.exists(gitignore):
        print(colored.yellow('exists'))
    else:
        try:
            with open(gitignore, 'w') as f:
                f.write(generate_content(args.templates))
                print(colored.green('done'))
        except Exception:
            print(colored.red('failed'))


parser = argparse.ArgumentParser(description='Generates a .gitignore file using http://gitignore.io')

commands = parser.add_subparsers(help='Available commands')

list_command = commands.add_parser('list', help='List all available templates.')
list_command.set_defaults(action=list_templates)

update_command = commands.add_parser('update', help='Updates the template repository')
update_command.set_defaults(action=update_templates)
update_command.add_argument('templates', nargs='*', metavar='template',
                            help='Selected templates used to generate the .gitignore patterns.')

write_command = commands.add_parser('write', help='Writes the specified templates to the .gitignore file.')
write_command.set_defaults(action=write_templates)
write_command.add_argument('--overwrite', dest='overwrite', action='store_true', default=False)
write_command.add_argument('templates', nargs='+', metavar='template',
                           help='Selected templates used to generate the .gitignore file.')

print_command = commands.add_parser('print', help='Print the ignore patterns of the specified templates.')
print_command.set_defaults(action=print_templates)
print_command.add_argument('templates', nargs='+', metavar='template',
                           help='Selected templates used to generate the .gitignore patterns.')

argcomplete.autocomplete(parser)
args = parser.parse_args()

try:
    args.action(args)
except KeyboardInterrupt:
    pass
except Exception, e:
    puts(str(e), stream=core.STDERR)
