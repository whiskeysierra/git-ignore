#!/usr/bin/env python
# PYTHON_ARGCOMPLETE_OK

from __future__ import print_function, unicode_literals
import argparse
import os

import argcomplete
from clint.textui import colored, core, indent, puts

directory = os.path.dirname(os.path.realpath(__file__))
repository = os.path.expanduser('~/.gitignore')

files = os.listdir(repository)


def list_tags(args):
    for tag in files:
        print(tag)


def update_tags(args):
    import requests

    if args.tags:
        tags = args.tags
    else:
        tags = requests.get('http://gitignore.io/api/list').text.strip().split(',')

    puts("Updating...")
    with indent(4):
        for tag in sorted(tags):
            with open(os.path.join(repository, tag), 'w') as f:
                puts('%s... ' % tag, newline=False)
                try:
                    content = requests.get('http://gitignore.io/api/%s' % tag).text
                    # skip comment header
                    lines = content.splitlines()

                    if not lines[0] == '# Generated by http://gitignore.io':
                        raise IOError('Invalid content: \n%s' % content)

                    content = '\n'.join(lines[2:])
                    f.writelines(content)
                    print(colored.green('done'))
                except Exception:
                    print(colored.red('failed'))


def generate_content(tags):
    parts = []

    for tag in tags:
        with open(os.path.join(repository, tag)) as f:
            parts.append(f.read())

    return '\n\n'.join(parts) + '\n'


def print_tags(args):
    puts(generate_content(args.tags), newline=False)


def write_tags(args):
    puts("Writing... ", newline=False)

    gitignore = os.path.join(os.getcwd(), '.gitignore')

    if not args.overwrite and os.path.exists(gitignore):
        print(colored.yellow('exists'))
    else:
        try:
            with open(gitignore, 'w') as f:
                f.write(generate_content(args.tags))
                print(colored.green('done'))
        except Exception:
            print(colored.red('failed'))


parser = argparse.ArgumentParser(description='Generates a .gitignore file using http://gitignore.io')

commands = parser.add_subparsers(help='Available commands')

list_command = commands.add_parser('list', help='List all available tags.')
list_command.set_defaults(action=list_tags)

update_command = commands.add_parser('update', help='Updates the tag repository')
update_command.set_defaults(action=update_tags)
update_command.add_argument('tags', nargs='*', metavar='tag',
                            help='Selected tags used to generate the .gitignore patterns.')

write_command = commands.add_parser('write', help='Writes the specified tags to the .gitignore file.')
write_command.set_defaults(action=write_tags)
write_command.add_argument('--overwrite', dest='overwrite', action='store_true', default=False)
write_command.add_argument('tags', nargs='+', metavar='tag',
                           help='Selected tags used to generate the .gitignore file.')

print_command = commands.add_parser('print', help='Print the ignore patterns of the specified tags.')
print_command.set_defaults(action=print_tags)
print_command.add_argument('tags', nargs='+', metavar='tag',
                           help='Selected tags used to generate the .gitignore patterns.')

argcomplete.autocomplete(parser)
args = parser.parse_args()

try:
    args.action(args)
except KeyboardInterrupt:
    pass
except Exception, e:
    puts(str(e), stream=core.STDERR)
